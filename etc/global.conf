##############################################################################
# This file is /var/lib/dosemu/global.conf, it is _allways_ executed
# as part of the inititial configuration
#
# Linux dosemu  configuration  for parser versions >= 3 (dosemu-0.97.0.1)
#
# ./doc/README-tech.txt (chapter 2.) contains a description of the syntax
# and the usage. However, you normal won't edit this file !!
#
# NOTES:
#
# 1. The file /etc/dosemu.conf contains variable settings, that are included by
#    /var/lib/dosemu/global.conf for doing the most reasonable configuration.
#    The file /etc/dosemu.conf is what gets updated by the menu driver
#    'setup-dosemu' tool.
#
# 2. We strongly recommend you to edit ONLY /etc/dosemu.conf.
#    If you change /var/lib/dosemu/global.conf, you are at your own and
#    could break 'setup-dosemu'. You really need to know a lot of DOSEMU
#    internals before you fiddle with editing global.conf.
#    However, some very special cases can only be handled in global.conf.
#    
# This file (/var/lib/dosemu/global.conf) may also serve as an example file
# for
#      .dosrc            ( user configuration file )
#      option -I         ( configuration via commandline, see man/dos.1 )
#
# Access rights are defined in
#
#      /etc/dosemu.users
#
##############################################################################

ifdef u_forceold
  undef parser_version_3
  define version_3_style_used
endif

ifndef parser_version_3
  # normal won't come here, because older DOSEMUs don't use this file
  # ... but if using -F option ...
  include "/etc/dosemu.conf"
else
  # we are on version 3 parser

  # we include the global settings from /etc/dosemu.conf
  shell("test -f /etc/dosemu.conf")
  if ( $DOSEMU_SHELL_RETURN)
    abort "
*** error: /etc/dosemu.conf not accessable
    ... giving up.
"
  endif

  include "/etc/dosemu.conf"
  ifndef version_3_style_used
    abort "
*** Your /etc/dosemu.conf is obviously an old style or a too simple one.
    Please read Quickstart and README.txt on how to upgrade.
"
  endif

  ## we first set some vital variable

  $CONFIG_VERSION = ( (0 << 24) | (97 << 16) | (2 << 8) | 0)
  #                    ^           ^^           ^         ^

  if ( $DOSEMU_VERSION_CODE < $CONFIG_VERSION )
    abort "sorry, your /var/lib/dosemu/global.conf doesn't match this dosemu version"
  endif




  $LIST_DELIM = " ,	"	#delimiters for lists <tab>, blank, comma

  if (strlen($_debug))
    debug $__debug ;
  else
    debug { off }
  endif

  if ($_cpuspeed) cpuspeed $_cpuspeed endif
  if (!$_rdtsc) rdtsc off endif
  pci $_pci

  dosbanner on
  timint $_timint
  mathco $_mathco
  cpu $_cpu
  xms $_xms
  if ($_ems) ems { ems_size $_ems ems_frame $_ems_frame } else ems off endif
  dosmem $_dosmem

  if ($_emusys ne "") emusys $_emusys endif
  if ($_emubat ne "") emubat $_emubat endif
  if ($_emuini ne "") emuini $_emuini endif

  $DISABLE_MOUSE = (0)
  $DISABLE_SERIAL = (0)

  ## terminal stuff, we check a lot to insure proper operation

  $BEING_ON = ""
  $USING_X = (0)
  $REMOTE_HOST = ""

  $xxx = shell("who am i")
  if ( strlen($xxx) && (strchr($xxx, "(" ) < 0 ))
    $BEING_ON = "console"
  else
    if (strstr($xxx, "(:") < 0)
      $BEING_ON = "remote"
      $REMOTE_HOST = strsplit($xxx, strchr($xxx,"(")+1,99)
      $REMOTE_HOST = strdel($REMOTE_HOST, strchr($REMOTE_HOST,")"),99)
    else
      $BEING_ON = ""
    endif
    if ($TERM eq "xterm")
      $BEING_ON = $BEING_ON, "_xterm"
      if ( (strchr($DOSEMU_OPTIONS,"X") >=0) && ($DISPLAY ne "") )
        $USING_X = (1)
      endif
    else
      if (strstr("linux console", $TERM) < 0)
        # remote side must be some type of real terminal
        $BEING_ON = $BEING_ON, "_terminal"
      else
        # remote side is a Linux console
        $BEING_ON = $BEING_ON, "_console"
      endif
    endif
  endif

  warn "dosemu running on ", $BEING_ON;

  if ( ($BEING_ON ne "console") && (!$USING_X) )
    $DISABLE_MOUSE = (1)
    $xxx = $_term_char_set
    if ($xxx eq "")
       $xxx = "latin"
       if (strstr($BEING_ON, "_console") >= 0)
         $xxx = "ibm"
       endif
    endif
    if ($_term_color) $_term_color = "on" else $_term_color = "off" endif
    terminal { charset $$xxx  updatefreq $_term_updfreq  escchar $_escchar
               color $$_term_color }
  endif

  ## host checking. Naah, we won't let all in ;-)

  ## first: logged in hosts
  if (strlen($REMOTE_HOST) && strlen($_odd_hosts))
    foreach $xxx ($LIST_DELIM,$_odd_hosts)
      if ( ! strncmp($xxx, $REMOTE_HOST, strlen($REMOTE_HOST)))
        abort "Sorry, your host is on the blacklist"
      endif
    done
  endif
  ## second: hosts on diskless machines, that aren't allowed
  if (strlen($_diskless_hosts))
    foreach $xxx ($LIST_DELIM, $_diskless_hosts)
      if ( ! strncmp($xxx, $DOSEMU_HOST, strlen($DOSEMU_HOST)))
        abort "Sorry, your host is on the blacklist"
      endif
    done
  endif

  ## X param settings

  if ( $USING_X || (strchr($DOSEMU_OPTIONS,"L") >0) )
    # running as xdos or DEXE (which may force X later)
    if ($_X_keycode) $_X_keycode = "keycode" else $_X_keycode = "" endif
    if ($_X_sharecmap) $_X_sharecmap = "sharecmap" else $_X_sharecmap = "" endif
    if ($_X_aspect_43) $_X_aspect_43 = "aspect_43" else $_X_aspect_43 = "" endif
    if ($_X_lin_filt) $_X_lin_filt = "lin_filt" else $_X_lin_filt = "" endif
    if ($_X_bilin_filt) $_X_bilin_filt = "bilin_filt" else $_X_bilin_filt = "" endif
    $_X_gamma = "gamma ", (int($_X_gamma * 100))
    if (strlen($_X_font)) $_X_font = "font ", $_X_font endif

    if (strlen($_X_winsize))
      $xxx = strstr($_X_winsize,", ")
      $_X_winsize = "winsize (", strdel($_X_winsize,$xxx,999), ") , (",
                    strsplit($_X_winsize,$xxx+1,999), ")"
    endif

    $xxx = $_X_vesamode
    $_X_vesamode = ""
    if (strlen($xxx))
      foreach $yyy (" 	", $xxx)
        $zzz = strchr($yyy,",")
        $_X_vesamode = "vesamode (", strdel($yyy,$zzz,999), "),(",
                      strsplit($yyy,$zzz+1,999), ") "
      done
    endif
    X { 
      title $_X_title icon_name $_X_icon_name
      updatefreq $_X_updfreq blinkrate $_X_blinkrate
      fixed_aspect $_X_fixed_aspect vgaemu_memsize $_X_vgaemu_memsize
      lfb $_X_lfb  pm_interface $_X_pm_interface
      $$_X_keycode $$_X_sharecmap $$_X_aspect_43 $$_X_lin_filt $$_X_bilin_filt
      $$_X_font $$_X_winsize $$_X_gamma
      $$_X_vesamode
    };
  endif

  ifdef guest
    ## /etc/dosemu.users defined 'guest' for this login
    define restricted		# force restricted setting
    $_hogthreshold = (1)	# force 'nice'
    $_rawkeyboard = (off)	# force normal keyboard
    if ($BEING_ON eq "console") video { vga } endif
    sound_emu off
    $DISABLE_MOUSE = (1)
    $DISABLE_SERIAL = (1)
  else
    ## other then guest
    # video settings
    if ($BEING_ON eq "console")
      if (!strlen($_video)) $_video = "plainvga" endif
      if ($_console) $_console = "console" else $_console = "" endif
      if ($_graphics)
        $_graphics = "graphics"
        $_console = "console"
        $_vbios_seg = "vbios_seg ", ($_vbios_seg)
        $_vbios_size = "vbios_size ", ($_vbios_size)
        $_vmemsize = "memsize ", ($_vmemsize)
        if ($_videoportaccess) allowvideoportaccess on endif
      else
        $_graphics = ""; $_vbios_seg = ""; $_vbios_size = ""; $_vmemsize = ""
      endif
      if (strlen($_chipset)) $_chipset = "chipset ",$_chipset endif
      if ($_dualmon) $_dualmon = "dualmon" else $_dualmon = "" endif
      video {
        $$_video $$_console $$_graphics $$_chipset
        $$_vbios_seg  $$_vbios_size $$_vmemsize $$_dualmon
      }
    endif

    ## sound settings
    if ($_sound)
      sound_emu { sb_base $_sb_base  sb_irq $_sb_irq  sb_dma $_sb_dma
                  sb_mixer $_sb_mixer  mpu_base $_mpu_base }
    else
      sound_emu off
    endif

    ## serial
    if ((!$DISABLE_SERIAL) && strlen($_com1))
      if ($_mouse_dev eq "com1")
        if (!$DISABLE_MOUSE) serial { mouse com 1 device $_com1 } endif
        $_mouse = ""
      else
        serial { com 1 device $_com1 }
      endif
    endif
    if ((!$DISABLE_SERIAL) && strlen($_com2))
      if ($_mouse_dev eq "com2")
        if (!$DISABLE_MOUSE) serial { mouse com 2 device $_com1 } endif
        $_mouse = ""
      else
        serial { com 2 device $_com2 }
      endif
    endif

    ## mouse settings
    if ((!$DISABLE_MOUSE) && strlen($_mouse) && (strstr($_mouse_dev,"com")<0))
      if ($_mouse_baud)
        $_mouse_baud = "baudrate ", $_mouse_baud
      else
        $_mouse_baud = ""
      endif
      if (strlen($_mouse_dev))
        $_mouse_dev = "device ", $_mouse_dev, " internaldriver"
      endif
      mouse { $$_mouse $$_mouse_dev $$_mouse_flags $$_mouse_baud }
    endif

  endif # end 'not guest'

  hogthreshold $_hogthreshold

  ## keyboard setting
  if ($BEING_ON ne "console") $_rawkeyboard = (off) endif
  if ( strstr($_layout, "load") <0 )
    # we use the builtin keytables
    if (strlen($_layout)) $_layout = "layout ",$_layout
    else $_layout = "layout us"  endif
    keyboard {  $$_layout  keybint $_keybint  rawkeyboard $_rawkeyboard }
  else
    # we have to load a keytable
    $yyy = ""
    foreach $xxx ($LIST_DELIM, $_layout)
      if ($xxx ne "load")
        $yyy = $xxx
      endif
    done
    if (!strlen($yyy))
      abort "no keytable name in $_layout"
    endif
    shell("test -f /var/lib/dosemu/keymap/", $yyy)
    if ( $DOSEMU_SHELL_RETURN)
      abort "keytable ",$yyy, "not found in /var/lib/dosemu/keymap/*"
    endif
    $_layout = 'include "keymap/', $yyy, '"' ;
    $$_layout
    keyboard { keybint $_keybint  rawkeyboard $_rawkeyboard }
  endif

  secure off
  $_disks = ""
  ifdef restricted
    ## /etc/dosemu.users defined 'restricted' for this login
    if (!strlen($_secure) secure on endif
    define c_normal
    if (strchr($_secure,"d")>=0) dexe { secure } endif
    ifdef guest
      if (strchr($_secure,"g")>=0) secure on  endif
    else
      if (strchr($_secure,"n")>=0) secure on  endif
      $_disks = $_hdimage_r
    endif
    if (strchr($_secure,"0")>=0) secure off endif
    dpmi off
    speaker emulated
    ipxsupport off
    printer { options "%s"  command "lpr"  timeout 20 }
  else
    ## /etc/dosemu.users does allow full access for this login
    dexe { allowdisk }
    if (!strlen($_vbootfloppy))
      bootC
      $_disks = $_hdimage
      if (strlen($_floppy_a)) floppy { device /dev/fd0 $$_floppy_a } endif
    else
      bootA
      $_vbootfloppy = "/var/lib/dosemu/", $_vbootfloppy
      floppy { heads 2  sectors 18  tracks 80 threeinch  file $_vbootfloppy }
    endif
    if (strlen($_floppy_b)) floppy { device /dev/fd1 $$_floppy_b } endif

    # misc stuff
    dpmi $_dpmi
    if (strlen($_irqpassing))
      foreach $xxx (" ", $_irqpassing)
        $xxx = "irqpassing { use_sigio ", $xxx, " }";
        $$xxx
      done
    else
      irqpassing off
    endif
    if (strlen($_speaker))
      $_speaker = "speaker ", $_speaker;
      $$_speaker
    else
      speaker off
    endif
    ipxsupport $_ipxsupport
    if ($_novell_hack) pktdriver novell_hack  endif
    vnet $_vnet
    if (strlen($_printer))
      $_printer = "'-P", $_printer, " %s'";
      printer { options $$_printer  command "lpr"  timeout $_printer_timeout }
    endif
    if (strlen($_ports)) ports { $$_ports } endif
  endif

  ## setting up hdimages
  if (strlen($_disks) && (!defined(c_dexerun)))
    foreach $xxx ($LIST_DELIM, $_disks)
      $xxx = "/var/lib/dosemu/", $xxx
      disk { image $xxx }
    done
  endif

  ## define the allowed classes for subsequent .dosrc and -I parsing
  ifdef restricted
    undef c_all
    ifdef guest
      undef c_normal
      define c_dexe
      define c_nice
      define c_x
    endif
  endif

endif
#############################################################################
