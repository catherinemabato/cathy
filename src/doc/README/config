<sect>Runtime Configuration Options<label id="config">
<p>

This section of the document by Hans, 
<htmlurl url="mailto:lermen@fgan.de" name="&lt;lermen@fgan.de&gt;">. Last
updated on Mar 20, 1998.

<p>
Most of DOSEMU configuration is done during runtime and per default it
expects the system wide configuration file /etc/dosemu.conf optionally
followed by the users ~/.dosemurc and additional configurations statements
on the commandline (-I option). The builtin configuration file of a DEXE
file is passed using the -I technique, hence the rules of -I apply.

In fact /etc/dosemu.conf and ~/.dosemurc (which have identical syntax)
are included by the systemwide configuration script
/var/lib/dosemu/global.conf, but as a normal user you won't ever think on
editing this, only dosemu.conf and your personal ~/.dosemurc.
The syntax of global.conf is described in detail in README-tech.txt,
so this is skipped here. However, the option -I string too
uses the same syntax as global.conf, hence, if you are doing some special
stuff (after you got familar with DOSEMU) you may need to have a look there.

In DOSEMU prior to 0.97.5 the private configuration file was called ~/.dosrc
(not to be confused with the new ~/.dosemurc). This will work as expected
formerly, but is subject to be nolonger supported in the near future.
This (old) ~/.dosrc is processed <em/after/ global.conf and follows (same
as -I) the syntax of global.conf (see README-tech.txt).

<p>

The first file expected (and interpreted) before any other configuration
(such as global.conf, dosemu.conf and ~/.dosemurc) is /etc/dosemu.users.
Within /etc/dosemu.users the general permissions are set:

<itemize>
  <item> which users are allowed to use DOSEMU.
  <item> which users are allowed to use DOSEMU suid root.
  <item> which users are allowed to have a private lib dir.
  <item> what kind of access class the user belongs to.
  <item> what special configuration stuff the users needs
</itemize>

and further more:
<itemize>
  <item> wether the lib dir (/var/lib/dosemu) resides elsewhere.
  <item> setting the loglevel.
</itemize>

<p>
Except for lines starting with `xxx=' (explanation below),
each line in dosemu.user corresponds to exactly <em/one/ valid user count,
the special user `all' means any user not mentioned earlier. Format:
<tscreen><verb>
  [ <login> | all ] [ confvar [ confvar [ ... ] ] ]
</verb></tscreen>

The below example is from etc/dosemu.users.secure, which you may copy
to /etc/dosemu.users.
<tscreen><verb>
  root c_all     # root is allowed to do all weird things
  nobody nosuidroot guest # variable 'guest' is checked in global.conf
                          # to allow only DEXE execution
  guest nosuidroot guest  # login guest treated as `nobody'
  myfriend c_all unrestricted private_setup
  myboss nosuidroot restricted private_setup
  all nosuidroot restricted # all other users have normal user restrictions
</verb></tscreen>
Note that the above `restricted' is checked in global.conf and will
disable all secure relevant feature. Setting `guest' will force
setting `restricted' too.

The use of `nosuidroot' will force a suid root dosemu binary to exit,
the user may however use a non-suid root copy of the binary.
For more information on this look at README-tech,
chapter 11.1 `Privileges and Running as User'

Giving the keyword `private_setup' to a user means he/she can have a private
DOSEMU lib under $HOME/.dosemu/lib. If this directory is existing, DOSEMU
will expect all normally under /var/lib/dosemu within that directory,
including `global.conf'. As this would be a security risc, it only will
be allowed, if the used DOSEMU binary is non-suid-root. If you realy trust
a user you may additionally give the keyword `unrestricted', which will
allow this user to execute a suid-root binary even on a private lib
directory (though, be aware).

In addition, dosemu.users can be used to define some global settings, which
must be known before any other file is accessed, such as:
<tscreen><verb>
  default_lib_dir= /opt/dosemu  # replaces /var/lib/dosemu
  log_level= 2                  # highest log level
</verb></tscreen>

With `default_lib_dir=' you may move /var/lib/dosemu elsewere, this mostly
is interesting for distributors, who want it elswere but won't patch the
DOSEMU source just for this purpose. But note, the dosemu supplied scripts
and helpers may need some adaption too in order to fit your new directory.

The `log_level=' can be 0 (never log) or 1 (log only errors) or 2 (log all)
and controls the ammount written to the systems log facility (notice).
This keyword replaces the former /etc/dosemu.loglevel file, which now is
obsolete.

Nevertheless, for a first try of DOSEMU you may prefer etc/dosemu.users.easy,
which just contains
<tscreen><verb>
  root c_all
  all c_all
</verb></tscreen>
to allow evrybody all weird things. For more details on security issues
have a look at README-tech.txt chapter 2.


<p>
After /etc/dosemu.users /etc/dosemu.conf (via global.conf) is interpreted,
and only during global.conf parsing access to all configuration options is
allowed. Your personal ~/.dosemurc is included directly after dosemu.conf,
but has less access rights (in fact the lowest level), all variables you
define within ~/.dosemurc transparently are prefixed with `dosemu_' such
that the normal namespace cannot be polluted (and a hacker cannot overwrite
security relevant enviroment variables). Within global.conf only those
~/.dosemurc created variables, that are needed are taken over and may
overwrite those defined in /etc/dosemu.conf.

<p>
The dosemu.conf (global.conf) may check for the configuration variables,
that are set in /etc/dosemu.users and optionaly include further configuration
files. But once /etc/dosemu.conf (global.conf) has finished interpretation,
the access to secure relevant configurations is (class-wise) restricted while
the following interpretation of (old) .dosrc and -I statements.

For more details on security setings/issues look at README-tech.txt, for
now (using DOSEMU the first time) you should need only the below description
of /etc/dosemu.conf (~/.dosemurc)

<sect1>Format of /etc/dosemu.conf

<p>
All settings in dosemu.conf are just variables, that are interpreted
in /var/lib/dosemu/global.conf and have the form of

<tscreen><verb>
  $_xxx = (n)
or
  $_zzz = "s"
</verb></tscreen>

where `n' ist a numerical or boolean value and `s' is a string.
Note that the brackets are important, else the parser won't decide
for a number expression. For numers you may have complete expressions
( such as (2*1024) ) and strings may be concatenated such as

<tscreen><verb>
  $_zzz = "This is a string containing '", '"', "' (quotes)"
</verb></tscreen>

Hence a comma separated list of strings is concatenated.
 
<sect2>Controling amount of debug output
<p>

DOSEMU will help you finding problems, when you enable its debug messages.
These will go into the file, that you defined via the `-o file' or `-O'
commandline option (the later prints to stderr). In dosemu.conf you
can preset this via

<tscreen><verb>
  $_debug = "-a"
</verb></tscreen>
 where the string contains all you normally may pass to the `-D' commandline
option (look at the man page for details).

<sect2>Basic emulaton settings
<p>

To enable INT08 type timer interrupts set the below on or off
<tscreen><verb>
  $_timint = (on)
</verb></tscreen>

Wether a numeric processor should be shown to the DOS space
<tscreen><verb>
  $_mathco = (on)
</verb></tscreen>

Which type of CPU should be emulated (NOTE: this is not the one you
are running on, but your setting may not exeed the capabilities of
the running CPU). Valid values are:  80[345]86
<tscreen><verb>
  $_cpu = (80386)
</verb></tscreen>

To let DOSEMU use the Pentium cycle counter (if availabe) to do better timing
use the below

<tscreen><verb>
  $_rdtsc = (on)   # or off
</verb></tscreen>

For the above `rdtsc' feature DOSEMU needs to know the exact CPU clock,
it normally calibrates it itself, but is you encounter a wrong mesurement
you may overide it such as
<tscreen><verb>
  $_cpuspeed = (166.666)  # 0 = let DOSEMU calibrate
</verb></tscreen>

NOTE: `$_rdtsc' and `$_cpuspeed' can <em/not/ be overwritten by ~/.dosemurc.

If you have a PCI board you may allow DOSEMU to access the PCI
configuration space by defining the below
<tscreen><verb>
  $_pci = (on)    # or off
</verb></tscreen>


Defining the memory layout, which DOS should see:
<tscreen><verb>
  $_xms = (1024)          # in Kbyte
  $_ems = (1024)          # in Kbyte
  $_ems_frame = (0xe000)
  $_dpmi = (off)          # in Kbyte
  $_dosmem = (640)        # in Kbyte, < 640
</verb></tscreen>
Note that (other as in native DOS) each piece of mem is separate, hence
DOS perhaps will show other values for 'extended' memory. To enable
DPMI (by giving it memory) is a security concern, so you should either
<em/not/ give access to dosemu for normal users (via /etc/dosemu.users)
or give those users the `restricted' attribute (see above).

There are some features in DOSEMU, that may violate system security
and which you should not use on machines, which are `net open'. To
have atleast a minimum of protection against intruders, use the folling:
<tscreen><verb>
  $_secure ="ngd"  # secure for: n (normal users), g (guest), d (dexe)
                   # empty string: depending on 'restricted'
</verb></tscreen>
The above is a string of which may be given or not, hence
<tscreen><verb>
  $_secure ="d"
</verb></tscreen>
would only effect execution of DEXEs. If you are not a `restricted' user
(as given via /etc/dosemu.users) the above settings won't apply.
To disable security checking atall set
<tscreen><verb>
  $_secure ="0"
</verb></tscreen>

NOTE: `$_secure' can <em/not/ be overwritten by ~/.dosemurc.

For the similar reasons you may `backout' some host, which you don't like
to have access to dosemu
<tscreen><verb>
  $_odd_hosts = ""    # black list such as
                      #      "lucifer.hell.com billy.the.cat"
  $_diskless_hosts="" # black list such as "hacker1 newbee gateway1"
</verb></tscreen>
The items in the lists are blank separated, `odd_hosts' checks for remote
logins, `diskless_hosts' are meant to be maschines, that mount a complete
tree, hence the checked host is the host DOSEMU is running on (not the
remote host). However, read README-tech,txt for more details on what
actually is disabled.

NOTE: `$_*_hosts' can <em/not/ be overwritten by ~/.dosemurc.

If you want mixed operation on the filesystem, from which you
boot DOSEMU (native and via DOSEMU), it may be necessary to have two
separate sets of `config.sys,autoexec.bat,system.ini'. DOSEMU can
fake a different file extension, so DOS will get other files when
running under DOSEMU.

<tscreen><verb>
  $_emusys = ""    # empty or 3 char., config.sys   -> config.XXX
  $_emubat = ""    # empty or 3 char., autoexec.bat -> autoexec.XXX 
  $_emuini = ""    # empty or 3 char., system.ini   -> system.XXX
</verb></tscreen>

As you would realize at the first glance: DOS will <em/not/ have the
the CPU for its own. But how much it gets from Linux, depends on the setting
of `hogthreshold'.
The HogThreshold value determines how nice Dosemu will be about
giving other Linux processes a chance to run.

<tscreen><verb>
  $_hogthreshold = (1)   # 0 == all CPU power to DOSEMU
                         # 1 == max power for Linux
                         # >1   the higher, the slower DOSEMU will be
</verb></tscreen>

If you have hardware, that is not supported under Linux but you have
a DOS driver for, it may be necessary to enable IRQ passing to DOS.
<tscreen><verb>
  $_irqpassing = ""  # list of IRQ number (2-15) to pass to DOS such as
                     # "3 8 10"
</verb></tscreen>

Here you tell DOSEMU what to do when DOS wants let play the speaker:
<tscreen><verb>
  $_speaker = ""     # or "native" or "emulated"
</verb></tscreen>

And with the below may gain control over <em/real/ ports on you machine.
But:
<bf>WARNING: GIVING ACCESS TO PORTS IS BOTH A SECURITY CONCERN AND
SOME PORTS ARE DANGEROUS TO USE.  PLEASE SKIP THIS SECTION, AND
DON'T FIDDLE WITH THIS SECTION UNLESS YOU KNOW WHAT YOU'RE DOING.</bf>

<tscreen><verb>
  $_ports = ""  # list of portnumbers such as "0x1ce 0x1cf 0x238"
                # or "0x1ce range 0x280,0x29f 310"
                # or "range 0x1a0,(0x1a0+15)"
</verb></tscreen>

NOTE: `$_ports' can <em/not/ be overwritten by ~/.dosemurc.


<sect2>Code page and character set
<p>
To select the character set and code page for use with DOSEMU you have
<tscreen><verb>
  $_term_char_set = "XXX"
</verb></tscreen>
where XXX is one of
  <descrip>
    <tag/ibm/ the text is taken whithout translation, it is to the user
      to load a proper DOS font (cp437.f16, cp850.f16 or cp852.f16 on the
      console).
    <tag/latin/ the text is processed using cp437->iso-8859-1 translation,
      so the font used must be iso-8859-1 (eg iso01.f16 on console);
      which is the default for unix in western languages countries.
    <tag/latin1/ like latin, but using cp850->iso-8859-1 translation (the
      difference between cp437 and cp850 is that cp437 uses some chars for
      drawing boxes while cp850 uses them for accentuated letters)
    <tag/latin2/ like latin1 but uses cp852->iso-8859-2 translation, so
      translates the default DOS charset of eastern european countries to the
      default unix charset for those countries.
  </descrip>
The default one is ``latin'' and if the string is empty, then an automatic
attempt is made: ``ibm'' for remote console and ``latin'' for anything else.
Depending on the charset setting the (below described) keyboard layouts
and/or the terminal behave may vary. You need to know the correct code page
your DOS is configured for in order to get the correct results.
For most western european countries 'latin' should be the correct setting.


<sect2>Terminals
<p>
This section applies whenever you run DOSEMU remotely or in an xterm.
Color terminal support is now built into DOSEMU.  Skip this section for
now to use terminal defaults, until you get DOSEMU to work.

<tscreen><verb>
  $_term_color = (on)   # terminal with color support
  $_term_updfreq = (4)  # time between refreshs (units: 20 == 1 second)
  $_escchar = (30)      # 30 == Ctrl-^, special-sequence prefix
</verb></tscreen>

`term_updfreq' is a number indicating the frequency of terminal updates of
the screen. The smaller the number, the more frequent.  A value of 20 gives
a frequency of about one per second, which is very slow.
`escchar' is a number (ascii code below 32) that specifies the control
character used as a prefix character for sending alt, shift, ctrl, and
function keycodes.  The default value is 30 which is Ctrl-^. So, for
example,

<tscreen><verb>
  F1 is 'Ctrl-^1', Alt-F7 is 'Ctrl-^s Ctrl-^7'.
  For online help, press 'Ctrl-^h' or 'Ctrl-^?'.
</verb></tscreen>

<sect2>Keyboard settings
<p>

When running DOSEMU from console (also remote from console) or X you
may need to define a proper keyboard layout. This is done either
by choosing one on the internal keytables or by loading an external
keytable from /var/lib/dosemu/keymap/* (which you may modify according
to your needs). Both sets have identical names (though you may add
any new one to /var/lib/dosemu/keymap/*):
<tscreen><verb>
  be              es-latin1       hu-latin2       sg
  de              finnish         it              sg-latin1
  de-latin1       finnish-latin1  keyb-no         sw
  dk              fr              no-latin1       uk
  dk-latin1       fr-latin1       po              us
  dvorak          hu              sf              
  es              hu-cwi          sf-latin1       jp106
</verb></tscreen>

You define an internal keytable such as
<tscreen><verb>
  $_layout = "name"
</verb></tscreen>
where `name' is one of the above. To load a keytable you just prefix
the string with "load" such as
<tscreen><verb>
  $_layout = "load de-latin1"
</verb></tscreen>

Note, however, that you have to set
<tscreen><verb>  
  $_X_keycode = (on)
</verb></tscreen>
to use this feature under X, because per default the keytable is
forced to be neutral (us). Normally you will have the correct settings
of your keyboard given by the X-server.

When being on console you might wish to use raw keyboard, especially
together with some games, that don't use the BIOS/DOS to get their
keystrokes.
<tscreen><verb>
  $_rawkeyboard = (1)
</verb></tscreen>
However, be carefull, when the application locks, you may not be able
to switch your console and recover from this. For details on recovering
look at README-tech.txt (Recovering the console after a crash).

NOTE: `$_rawkeyboard' can <em/not/ be overwritten by ~/.dosemurc.


The `keybint (on)' allows more accurate of keyboard interrupts, It
is a bit unstable, but makes keyboard work better when set to "on".
<tscreen><verb>
  $_keybint = (on)     # emulate PCish keyboard interrupt
</verb></tscreen>



<sect2>X Support settings
<p>
If DOSEMU is running in its own X-window (not xterm), you may need to
tailor it to your needs. Here a summary of the settings and a brief
description what they mean. A more detailed description of values
one can be found at chapter 2.2.14 (X Support settings) of README-tech.txt

<tscreen><verb>
$_X_updfreq = (5)       # time between refreshs (units: 20 == 1 second)
$_X_title = "DOS in a BOX" # Title in the top bar of the window
$_X_icon_name = "xdos"  # Text for icon, when minimized
$_X_keycode = (off)     # on == translate keybord via dosemu keytables
$_X_blinkrate = (8)     # blink rate for the cursor
$_X_font = ""           # basename from /usr/X11R6/lib/X11/fonts/misc/*
                        # (without extension) e.g. "vga"
$_X_mitshm = (on)       # Use shared memory extensions
$_X_sharecmap = (off)   # share the colormap with other applications
$_X_fixed_aspect = (on) # Set fixed aspect for resize the graphics window
$_X_aspect_43 = (on)    # Always use an aspect ratio of 4:3 for graphics
$_X_lin_filt = (off)    # Use linear filtering for >15 bpp interpol.
$_X_bilin_filt = (off)  # Use bi-linear filtering for >15 bpp interpol.
$_X_mode13fact = (2)    # initial factor for video mode 0x13 (320x200)
$_X_winsize = ""        # "x,y" of initial windows size
$_X_gamma = (1.0)       # gamma correction
$_X_vgaemu_memsize = (1024) # size (in Kbytes) of the frame buffer
                        # for emulated vga
$_X_lfb = (on)  # use linear frame buffer in VESA modes
$_X_pm_interface = (on) # use protected mode interface for VESA modes
$_X_mgrab_key = ""      # KeySym name to activate mouse grab, empty == off
$_X_vesamode = ""       # "xres,yres ... xres,yres"
                        # List of vesamodes to add. The list has to contain
                        # SPACE separated "xres,yres" pairs
</verb></tscreen>


<sect2>Video settings ( console only )
<p>

<em>!!WARNING!!: IF YOU ENABLE GRAPHICS ON AN INCOMPATIBLE ADAPTOR,
YOU COULD GET A BLANK SCREEN OR MESSY SCREEN EVEN AFTER EXITING DOSEMU.
Read doc/README-tech.txt (Recovering the console after a crash).
</em>

Start with only text video using the following setup in dosemu.conf

<tscreen><verb>
  $_video = "vga"         # one of: plainvga, vga, ega, mda, mga, cga
  $_console = (0)         # use 'console' video
  $_graphics = (0)        # use the cards BIOS to set graphics
  $_videoportaccess = (1) # allow videoportaccess when 'graphics' enabled
  $_vbios_seg = (0xc000)  # set the address of your VBIOS (e.g. 0xe000)
  $_vbios_size = (0x10000)# set the size of your BIOS (e.g. 0x8000)
  $_vmemsize = (1024)     # size of regen buffer
  $_chipset = ""       
  $_dualmon = (0)         # if you have one vga _plus_ one hgc (2 monitors)
</verb></tscreen>

After you get it `somehow' working and you have one of the DOSEMU supported
graphic cards you may switch to graphics mode changing the below

<tscreen><verb>
  $_graphics = (1)        # use the cards BIOS to set graphics
</verb></tscreen>

If you have a 100% compatible standard VGA card that <em/may/ work,
however, you get better results, if your card has one of the DOSEMU supported
video chips and you tell DOSEMU to use it such as

<tscreen><verb>
  $_chipset = "s3"        # one of: plainvga, trident, et4000, diamond,
                          # avance, cirrus, matrox, wdvga, paradise
</verb></tscreen>

Note, `s3' is only an example, you <em/must/ set the correct video chip
else it most like will crash your screen.

NOTE: `video setting' can <em/not/ be overwritten by ~/.dosemurc.



<sect2>Disks and floppies
<p>

The parameter settings via dosemu.conf are tailored to fit the recomended
usage of disk and floppy access. There are other methods too, but for these
you have to look at README-tech.txt (and you may need to modify global.conf).
We strongly recommend that you use the proposed techique. Here the normal
setup:

<tscreen><verb>
  $_vbootfloppy = ""    # if you want to boot from a virtual floppy:
                        # file name of the floppy image under /var/lib/dosemu
                        # e.g. "floppyimage" disables $_hdimage
                        #      "floppyimage +hd" does _not_ disable $_hdimage
  $_floppy_a ="threeinch" # or "fiveinch" or empty, if not existing
  $_floppy_b = ""       # dito for B:

  $_hdimage = "hdimage.first" # list of hdimages under /var/lib/dosemu
                        # assigned in this order such as
                        # "hdimage_c hdimage_d hdimage_e"
  $_hdimage_r = $_hdimage # hdimages for 'restricted access (if different)
</verb></tscreen>

When you installed DOSEMU (`make install') you will have a bootable
hdimage in the file /var/lib/dosemu/hdimage.first. It contains a very tiny
installation of FreeDos, just to show you that it works. A hdimage is
a file containing a virtual image of a DOS-FAT filesystem. Once you have
booted it, you (or autoexec.bat) can use `lredir' to access any directory
in your Linux tree as DOS drive (a -t msdos mounted too). Look at chapter
6 (Using Lredir) and for more details
on creating your own (better) hdimage look at chapter 4.3 of this README
(Making a bootable hdimage for general purpose). Chapter 4.4 also describes
how to import/export files from/to a hdimage.

Now, what does the above `vbootfloppy' mean? Alternatively of booting
from a virtual `disk' you may have an image of a virtual `floppy' which
you just created such as `dd if=/dev/fd0 of=floppy_image'. If this
floppy contains a bootable DOS, then

<tscreen><verb>
  $_vbootfloppy = "floppy_image"
</verb></tscreen>

will boot that floppy. Once running in DOS you can make the floppy
available by (virtually) removing the `media' via `bootoff.com'.
If want the disk access specified via `$_hdimage' anyway, you may add the
keyword `+hd' such as

<tscreen><verb>
  $_vbootfloppy = "floppy_image +hd"
</verb></tscreen>

In some rare cases you may have problems accessing Lredir'ed drives
(especially when your DOS application refuses to run on a 'network drive'),
though I personally never happened to fall into one of this.
For this to overcome you may need to use socalled `partition access'. The odd
with this kind of access is, that you <em/never/ should have those partition
mounted in the Linux file system at the same time as you use it in DOSEMU
(which is quite uncomfortable and dangerous on a multitasking OS such as
Linux ). Though global.conf checks for mounted partitions, there may be races
that are not caught. In addition, when your DOSEMU crashes, it may leave
some FAT sectors unflushed to the disk, hence destroying the partition.
Anyway, if you think you need it, here is how you `assign' real DOS partitions
to DOSEMU:

<tscreen><verb>
  $_hdimage = "hdimage.first /dev/hda1 /dev/sdc4:ro"
</verb></tscreen>

The above will have `hdimage.first' as booted drive C:, /dev/hda1 as D:
(read/write) and /dev/sdc4 as E: (readonly). You may have any kind of order
within `$_hdimage', hence

<tscreen><verb>
  $_hdimage = "/dev/hda1 hdimage.first /dev/sdc4:ro"
</verb></tscreen>

would have /dev/hda1 as booted drive C:. Note that the access to the
/dev/* devices <em/must/ be exclusive (no other process should use it)
except for `:ro'.
 

<sect2>COM ports and mices
<p>

We have simplified the configuration for mices and serial ports and
check for depencies between them. If all strings in the below example
are empty, then no mouse and/or COM port is available. Note. that you
need <em/no/ mouse.com driver installed in your DOS environment, DOSEMU
has the mousedriver builtin. The below example is such a setup

<tscreen><verb>
  $_com1 = ""           # e.g. "/dev/mouse" or "/dev/cua0"
  $_com2 = "/dev/modem" # e.g. "/dev/modem" or "/dev/cua1"

  $_mouse = "microsoft" # one of: microsoft, mousesystems, logitech,
                        # mmseries, mouseman, hitachi, busmouse, ps2
  $_mouse_dev = "/dev/mouse" # one of: com1, com2 or /dev/mouse
  $_mouse_flags = ""	# list of none or one or more of:
  			# "emulate3buttons cleardtr"
  $_mouse_baud = (0)	# baudrate, 0 == don't set
</verb></tscreen>

The above example lets you have your modem on COM2, COM1 is spare (as
you may have your mouse under native DOS there and don't want to change
the configuration of your modem software between boots of native DOS and Linux)

However, you may use your favorite DOS mousedriver and directly let it
drive COM1 by changing the below variables (rest of variables unchanged)

<tscreen><verb>
  $_com1 = "/dev/mouse"
  $_mouse_dev = "com1"
</verb></tscreen>

And finaly, when having a PS2 mouse running on your Linuxbox you use
the builtin mousedriver (not your mouse.com) to get it work:
( again leaving the rest of variables unchanged)

<tscreen><verb>
  $_mouse = "ps2"
  $_mouse_dev = "/dev/mouse"  
</verb></tscreen>

When using a PS2 mouse or when having more then 2 serial ports you may
of course assign _any_ free serialdevice to COM1, COM2. The order doesn't
matter:

<tscreen><verb>
  $_com1 = "/dev/cua2"
  $_com2 = "/dev/cua0"
</verb></tscreen>




<sect2>Printers
<p>

Printer is emulated by piping printer data to your normal Linux printer.
The belows tells DOSEMU which printers to use. The `timeout' tells DOSEMU
how long to wait after the last output to LPTx before considering the
print job as `done' and to to spool out the data to the printer.

<tscreen><verb>
$_printer = "lp"        # list of (/etc/printcap) printer names to appear as
                        # LPT1 ... LPT3 (not all are needed, empty for none)
$_printer_timeout = (20)# idle time in seconds before spooling out
</verb></tscreen>

<sect2>Networking under DOSEMU
<p>

Turn the following option `on' if you require IPX/SPX emulation,
there is no need to load IPX.COM within the DOS session.
( the option does not emulate LSL.COM, IPXODI.COM, etc. )
And NOTE: You must have IPX protocol configured into the kernel.

<tscreen><verb>
  $_ipxsupport = (on)
</verb></tscreen>

Enable Novell 8137->raw 802.3 translation hack in new packet driver.

<tscreen><verb>
  $_novell_hack = (on)
</verb></tscreen>

If you make use of the dosnet device driver, you may turn on 'multi'
packet driver support via

<tscreen><verb>
  $_vnet = (on)
</verb></tscreen>

For more on this look at chapter 24 (Net code)

<sect2>Sound
<p>

The sound driver is more or less likely to be broken at the moment.
Anyway, here are the settings you would need to emulate a SB-sound card
by passing the control to the Linux soundrivers.

<tscreen><verb>
$_sound = (off)           # sound support on/off
$_sb_base = (0x220)       # base IO-address (HEX)
$_sb_irq = (5)            # IRQ
$_sb_dma = (1)            # DMA channel
$_sb_dsp = "/dev/dsp"     # Path the sound device
$_sb_mixer = "/dev/mixer" # path to the mixer control
$_mpu_base = "0x330"      # base address for the MPU-401 chip (HEX)
                          # (not yet implemented)
</verb></tscreen>

