#!/usr/bin/python3

import argparse
import os
import shutil
import subprocess
import sys
import time
import zipfile
import zlib
from pathlib import Path

def extract_zipfile_entry(archive, zipinfo, output_filename):
    if Path(output_filename).exists():
        with open(output_filename, 'rb') as existing_file:
            existing_file_crc32 = zlib.crc32(existing_file.read())
            existing_file.close()
        if existing_file_crc32 == zipinfo.CRC:
            print('File with equal content ' + output_filename + ' already exists, skipping...')
            return
        else:
            print('Existing file with different content found ' + output_filename + """
                  Likely another DOS version is installed already. Remove the
                  existing file and rerun this script to proceed.""")
            sys.exit(1)
    with open(output_filename, 'wb') as output_file:
        output_file.write(archive.read(zipinfo.filename))
        output_file.close()
    os.utime(output_filename, (time.time(), time.mktime(zipinfo.date_time + (0, 0, -1))))

def extract_freedos_archives(source, drive_root, variant):
    for filename in Path(source).iterdir():
        if variant == 'userspace':
            if str(filename).endswith('command.com'):
                continue
            if str(filename).endswith('kernel.zip'):
                continue
        archive = zipfile.ZipFile(filename)
        if str(filename).endswith('lib-sk32.zip'):
            os.makedirs(os.path.join(drive_root, 'bin'), exist_ok=True)
            extract_zipfile_entry(archive, archive.getinfo('llib32/lib.exe'), os.path.join(drive_root, 'bin', 'lib.exe'))
            os.makedirs(os.path.join(drive_root, 'doc', 'lib'), exist_ok=True)
            extract_zipfile_entry(archive, archive.getinfo('llib32/readme'), os.path.join(drive_root, 'doc', 'lib', 'readme'))
        else:
            if str(filename).endswith('kernel.zip'):
                try:             # version 1.2
                    extract_zipfile_entry(archive, archive.getinfo('BIN/KERNL386.SYS'), os.path.join(drive_root, 'kernel.sys'))
                except KeyError: # version 1.1
                    extract_zipfile_entry(archive, archive.getinfo('bin/kernl386.sys'), os.path.join(drive_root, 'kernel.sys'))
            for entry in archive.infolist():
                filename = entry.filename.lower()
                if filename.startswith('packages/') or filename.startswith('source/') or filename == 'bin/kernl86.sys' or filename == 'bin/kernl386.sys':
                    continue
                elif entry.is_dir():
                    output_filename = os.path.join(drive_root, filename)
                    os.makedirs(output_filename, exist_ok=True)
                else:
                    output_filename = os.path.join(drive_root, filename)
                    extract_zipfile_entry(archive, entry, output_filename)

def create_symlink(source, destination):
    if Path(destination).is_file():
        os.unlink(destination)
    os.symlink(source, destination)

def install_freedos_archives(source, drive_root, variant = 'userspace'):
    print('Installing FreeDOS packages...')
    os.makedirs(drive_root, exist_ok=True)
    extract_freedos_archives(source, drive_root, variant)

    create_symlink('swsubst.exe', os.path.join(drive_root, 'bin', 'join.exe'))
    create_symlink('swsubst.exe', os.path.join(drive_root, 'bin', 'subst.exe'))

    subprocess.run(['chmod', '--silent', '644', drive_root + '/appinfo/*', drive_root + '/bin/*', drive_root + '/doc/*/*', drive_root + '/nls/*'])
    subprocess.run(['chmod', '--silent', '755', drive_root + '/doc/*'])

    print('Finished installing FreeDOS packages')

def symlink_freecom(source, drive_root):
    command_source = os.path.join('bin', 'command.com')
    command_destination = os.path.join(drive_root, 'command.com')
    if Path(command_destination).exists():
        if os.path.islink(command_destination) and os.readlink(command_destination) == command_source:
            print('Symlink command.com -> bin/command.com already exists.')
        else:
            print("""Existing command.com with different content found.
                  Likely another DOS version is installed already. Remove the
                  existing file and rerun this script to proceed.""")
    else:
        os.symlink(command_source, command_destination)
    print('Installation complete')

parser = argparse.ArgumentParser(description="""FreeDOS installation script.
All FreeDOS ZIP files provided in the source directory are transformed into a structure resembling the FreeDOS environment as shipped along DOSEMU 1.""")
parser.add_argument("source", type=str, help="source directory containing FreeDOS ZIP files")
parser.add_argument("destination", type=str, help="destination root directory")
parser.add_argument("variant", type=str, choices=['full', 'userspace'], help="install a full FreeDOS environment or only the userspace parts (intended to complement FDPP)")

args = parser.parse_args()

# system installation
cmddir = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'share', 'dosemu', 'commands')
if not Path(cmddir, 'fdconfig.sys').is_file():
    # running from within source tree
    cmddir = os.path.dirname(os.path.abspath(__file__))

# Detect which DOS is provided and run the appropriate installation routine
if args.variant == "full":
    install_freedos_archives(args.source, args.destination, args.variant)
    symlink_freecom(args.source, args.destination)
    shutil.copy(os.path.join(cmddir, 'fdconfig.sys'), args.destination)
    sys.exit(0)

for filename in Path(args.source).glob('*.zip'):
    for entry in zipfile.ZipFile(filename).namelist():
        if entry == 'BIN/': # found a freedos archive
            install_freedos_archives(args.source, args.destination)
            sys.exit(0)

print('No DOS installation files were found.')
print('Run loaddosinstall as root to download a version of DOS.')
sys.exit(1)
