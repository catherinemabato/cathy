#!/usr/bin/python3

import argparse
import os
import shutil
import subprocess
import sys
import time
import zipfile
from pathlib import Path

def extract_zipfile_entry(archive, zipinfo, output_filename):
    with open(output_filename, 'wb') as output_file:
        output_file.write(archive.read(zipinfo.filename))
        output_file.close()
    os.utime(output_filename, (time.time(), time.mktime(zipinfo.date_time + (0, 0, -1))))

def extract_freedos_archives(source, drive_root):
    for filename in Path(source).iterdir():
        archive = zipfile.ZipFile(filename)
        if str(filename).endswith('lib-sk32.zip'):
            os.makedirs(os.path.join(drive_root, 'bin'), exist_ok=True)
            extract_zipfile_entry(archive, archive.getinfo('llib32/lib.exe'), os.path.join(drive_root, 'bin', 'lib.exe'))
            os.makedirs(os.path.join(drive_root, 'doc', 'lib'), exist_ok=True)
            extract_zipfile_entry(archive, archive.getinfo('llib32/readme'), os.path.join(drive_root, 'doc', 'lib', 'readme'))
        else:
            for entry in archive.infolist():
                filename = entry.filename.lower()
                if filename.startswith('packages/') or filename.startswith('source/') or filename == 'bin/kernl86.sys':
                    continue
                elif entry.is_dir():
                    output_filename = os.path.join(drive_root, filename)
                    os.makedirs(output_filename, exist_ok=True)
                else:
                    output_filename = os.path.join(drive_root, filename)
                    extract_zipfile_entry(archive, entry, output_filename)

def create_symlink(source, destination):
    if Path(destination).is_file():
        os.unlink(destination)
    os.symlink(source, destination)

def install_freedos_archives(source, drive_root):
    print('Installing FreeDOS packages...')
    os.makedirs(drive_root, exist_ok=True)
    extract_freedos_archives(source, drive_root)

    create_symlink('swsubst.exe', os.path.join(drive_root, 'bin', 'join.exe'))
    create_symlink('swsubst.exe', os.path.join(drive_root, 'bin', 'subst.exe'))

    subprocess.run(['chmod', '--silent', '644', drive_root + '/appinfo/*', drive_root + '/bin/*', drive_root + '/doc/*/*', drive_root + '/nls/*'])
    subprocess.run(['chmod', '--silent', '755', drive_root + '/doc/*'])

    print('Finished installing FreeDOS packages')

def install_freedos_kernelpluscommand(source, drive_root):
    shutil.move(os.path.join(drive_root, 'bin', 'kernl386.sys'), os.path.join(drive_root, 'kernel.sys'))
    os.symlink(os.path.join('bin', 'command.com'), os.path.join(drive_root, 'command.com'))
    print('Installation complete')

parser = argparse.ArgumentParser(description="""FreeDOS installation script.
All FreeDOS ZIP files provided in the source directory are transformed into a structure resembling the FreeDOS environment as shipped along DOSEMU 1.""")
parser.add_argument("source", type=str, help="source directory containing FreeDOS ZIP files")
parser.add_argument("destination", type=str, help="destination root directory")

args = parser.parse_args()

# system installation
cmddir = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'share', 'dosemu', 'commands')
if not Path(cmddir, 'fdconfig.sys').is_file():
    # running from within source tree
    cmddir = os.path.dirname(os.path.abspath(__file__))

# Detect which DOS is provided and run the appropriate installation routine
if Path(args.source, 'kernel.zip').exists():
    install_freedos_archives(args.source, args.destination)
    install_freedos_kernelpluscommand(args.source, args.destination)
    shutil.copy(os.path.join(cmddir, 'fdconfig.sys'), args.destination)
    sys.exit(0)

for filename in Path(args.source).glob('*.zip'):
    for entry in zipfile.ZipFile(filename).namelist():
        if entry == 'BIN/': # found a freedos archive
            install_freedos_archives(args.source, args.destination)
            sys.exit(0)

print('No DOS installation files were found.')
print('Run loaddosinstall as root to download a version of DOS.')
sys.exit(1)
