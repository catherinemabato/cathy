   Insmod-HACKER_TOOL, a modified insmod-2.1.8
   ===========================================


   This is a modified insmod for development purpose, which can load a module
   even if some syms are undefined in ksyms. The addresses then come out
   of /usr/src/(z)System.map. To avoid reading the wrong map I compare the 
   known addresses from get_kernel_sym() against the ones in (z)System.map.
   So there is *very* low propability of crashes.

   This insmod can be used as a replacement for the ./insmod contained
   in the official modules-2.1.8.tar.gz from Bjorn Ekwall and Jacques Gelinas.
   It can replace the official one, because the special features are switched
   on by command line options. Usage is (special features marked with *) :


  insmod [-fkmopsvVxX] [-o name] module [[sym=value]...]
* insmod [-fkmopsvVxXwl] [-o name] [-z | -Z mapfile] module [[sym=value]...]

  module     Filename of a loadable kernel module (*.o)
  -f         Force loading under wrong kernel version
             (together with -z also disables mapfile check)
  -k         Make module (autoclean)-able
  -m         Generate loadmap (so crashes can be traced)
  -o name    Set internal modulname to name
  -p         Poll mode, just check if the module matches the kernel
  -s         Report errors via syslog
  -v         Verbose output
  -V         Show version
  -x         do *not* export externs
  -X         *do* export externs
* -w         print warnings
* -z         At last use /usr/src/linux/zSystem.map to resolve
             (on Linux > 1.1.76:  System.map)
* -Z mapfile As -z, but use mapfile
* -l         Together with -z, -Z, also take local symbols from map
             First all global symbols, then the (remaining) locals are resolved.
             But note, local symbols can be multiple defined, last one is taken

To use insmod-HACKER_TOOL together with modprobe (look at the manpage of
modprobe) you may add the HACKER_TOOL special options to the 'options line'
in /etc/modules.conf such as

  options emumodule +-lZ +/System.map
  alias dosemu emumodule

The '+' prefix forces the parameter to be inserted into the options part of
the commandline that will be generated by modprobe. Without this, the option
would be appended, hence beeing not recognized as option.

If you then copy the insmod-HACKER_TOOL over the original in /sbin and
copy syscallmgr.o and emumodule.o to /lib/modules/<version>/misc, then
you can load emumodule with 'modprobe dosemu' and unload it with
'modprobe -r dosemu'.



NOTE:

  A.    This feature was added to insmod by the DOSEMU-team
        and released as part of the dosemu-distribution 
        much *earlier* then the release of modules-1.1.67.
        Unfortunately the meanings of the -m switch differs.
        Because of this I decided to take over the meaning from the official
        moduls release. This feature can be enabled via HACKER_TOOL.
        So, for old users of dosemu's insmod:  -m, -M  becomes -z, -Z ! Ok?
        Starting with Linux 1.1.76 the zSystem.map exists no longer,
        and is replaced by System.map (same file structure), but don't worry,
        if zSystem.map is not found, System.map is taken by default.
 
  B.    You may wonder why the dosemu team did not take effort to get
        this feature part of the official modutils release ?
        In fact, we did (at state of Linux 1.1.83)!
        However, the official interface for modules are the symbols
        that are exported by 'ksyms' and Linus decided to tholerate
        binary-only modules that only use these Symbols. Because
        resolving _all_ Symbols via System.map would break this policy
        Linus did refuse to allow this for the 'official' version
        modules.
        So, we have the unconfortable state to always repatch the modules
        stuff whenever a a new release comes up, ... sorry but we accept this.
        To make this as easy as possible, the HACKER_TOOL routines are
        programmed as isolated as possible.


Hans <lermen@elserv.ffm.fgan.de>
