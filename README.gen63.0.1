                             Hans <lermen@elserv.ffm.fgan.de>, Jan 17, 1996


INTSTALLING DOSEMU-0.63.0.1
===========================

1. Have a 'clean' http://www.ednet.ns.ca/auto/rddc2/dosemu.tgz
   ( I fetched mine Jan 21 14:58 ) untared into directory

   /usr/src/dosemu-0.63.0-clean

2. Untar the dosemu63.0.1-gen.tgz into 

   /usr/src/dosemu63.0.1-gen

3. Do

   cd /usr/src/dosemu63.0.1-gen
   ./gen63.0.1 dosemu-0.63.0-clean

4. Now you have a temporary working 0.63.0.0 in

   /usr/src/dosemu-0.63.0.1

   cd to it and do 'make most'

That's it ...

...and if you (while looking at the gen63.0.1 script) feel needing to ask
   " ... why not simply apply a patch ? "

   Well, here is the answer:
   " 1. This combination of manual and automatic editing prevents me poor
        human beeing from making silly mistakes.
        (And mistakes we should not do in this critical phase).
     2. This is more tholerant against changes in the source, than a
        simple diff/patch.
     3. We get an automatic log of what we did. "
     


NOTE:

The bin, commands, modules directories are created dosemu-version-dependend
by make (not by gen63.0.1).
In fact they are links to <version>/bin
                          <version>/commands
                          <version>/modules
This will avoid messing up with wrong binaries during development
(as we had in the past).




LAYOUT DIFFERENCES against 0.61
===============================
It turns out that we had to modify the directory layout a bit
in order to come to a reasonable compromise. In addition, IMHO
some stuff got into the wrong place.

- We will leave most of the header files in src/include.
  Splitting it up as in 0.61 will make development quite
  unconfortable. Differences in architectures can better be
  handled via #ifdef, and if we do so, we also easily can
  _see_ the differences between the architectures.
  This avoids overlooking something.

  Only those headerfiles that won't be compilable,
  (e.g. asm code for different machines) may go into
  architecture dependent include directories.
  (this is what Linus does with the kernel also).

- In 0.61 many stuff from 0.60, that was isolated in directories
  has been merged into single directories (not always) using a
  file prefix such as dev_ or bios_ e.t.c.
  This also leads to difficulties during further development, because
  it's difficult to handle the files that belong together,
  and also we can't have separated Makefiles for isolated projects.
  Therefore, in 0.63 we have:

     src/base/bios
     src/base/keyboard
     src/base/serial
     src/base/dev/dma
     src/base/dev/pic
     src/dosext/dpmi
     src/dosext/drivers
     src/dosext/mfs
     ... e.t.c.

- In order to be compatible with the old stuff we establish links in
  some of the directories, so the old Makefiles will work to compile.
  The only 'src' links in 0.63.0.1  are:

     src/arch/netbsd/async -> ../linux/async
     src/data.c -> base/data.c

- Binaries, DOS-commands and modules go into version dependent directory,
  and they are true make targets. (no more confusion on messing with
  wrong binaries)
  See also comment above.

  The links generated by make at compile time are:

     0.63.0.1/bin/rmmod -> insmod
     0.63.0.1/bin/ksyms -> insmod
     0.63.0.1/bin/xdos -> dos
     bin -> 0.63.0.1/bin              (absolute)
     commands -> 0.63.0.1/commands    (absolute)
     modules -> 0.63.0.1/modules      (absolute)

- We have both, a bin/commands and a src/commands, DOS commands that
  cannot be compiled by as86 (needing a DOS-running compiler) are now
  distributed in src/commands/precompiled and copied by make to bin/commands.
  Hdimage.dist no longer is a distributed binary, instead it is now generated
  by Pasi's mkfatimage out of the contents of bin/commands.

- The stuff in 'tools' only relates to compilation (src), so its part
  of the 'source', so we put the into src/tools.
  If there will be tool-stuff not relating to the source, will later
  will create a ./tools of course.

- Some files, which 'the whole dosemu world' expects to be in
  the dosemu root directory, will be there again.
  (ChangeLog QuickStart load_module.sh unload_module.sh)

- Currently most of movement of functions into newer or other files
  has been done in 0.63.0.1. This was done by a have automatic process
  in order to avoid as much 'human' errors as possible. Not all of the
  function are yet implemented the '0.61-way', however they are in there
  final places.




The changes from 0.63.0 to 0.63.0.1
===================================


  These are the Notes I wrote down while working on the fnx move for
  0.63.0.1. I used an automatic genrated reference list to gether with
  the roadmap of Alistar. In addition to the below notes, you also may
  have a look at the file 'fnxmove.log', which contains a log of what
  was moved were by the 'pmove' script.

  How to read the below ? Lines of form

    T io_select            src/base/ioctl       src/base/misc/dosio

  are taken out of the auto-reference list and you should read it as

    type functionname path_in_0.61 path_in_0.63

  were type is 'text' (T), 'data' (D), as of 'nm' output.

  NOTE:

  If the changement from 0.60 to 0.61 was just sort of renaming
  (either file base name  or function name) we don't follow it at the
  moment, because we (the team) have enough work to become familar
  with the other more important changes.
  ... If we later have time enough, and if we feel it's worth ...



  New: src/base/misc/ioctl.c
  --------------------------

   T io_select            src/base/ioctl       src/base/misc/dosio
   T io_select_init       src/base/ioctl       src/emu
   T io_select_add        src/base/ioctl       src/emu (add_to_io_select)
   T io_select_remove     src/base/ioctl       src/emu (remove_from_io_select)
   T ioctl_execute        src/base/ioctl       src/emu (do_ioctl)
   T ioctl_queue          src/base/ioctl       src/emu (queue_ioctl)
   T ioctl_queue_run      src/base/ioctl       src/emu (do_queued_ioctl)


  Changed: src/base/async/dyndeb.c
  --------------------------------
   (no move)
   T SetDebugFlagsHelper  src/base/config      src/base/async/dyndeb
   T GetDebugFlagsHelper  src/base/config      src/base/async/dyndeb

   We let the code here, to move it to src/base/init/config.c makes no
   sense. We just let SetDebugFlagsHelper() call  parse_debugflags(). 


  Unchanged: src/base/keyboard/Xkeyb.c
  -----------------------------------
   T X_process_key        src/env/X-keyb       src/base/keyboard/Xkeyb

   Sort of interpretation were we should have this. I tend to leave it
   were it is: in the keyboard directory.


  New: src/emu-i386/ports.c
  ------------------------

   The new port_handler stuff from 0.61 is absolutely incompatible with
   the current 0.60/0.63 stuff. So, at the moment we can't do anything
   other then moving
      'inb,inw,ind,outb,outw,outd' from src/arch/linux/async/sigsegv.c
   completely into src/emu-i386/ports.c.
   Well this is odd, because we have the names used by 0.61 for port-access
   (e.g. port_out, port_in, ...) also defined in src/include/ports.h.
   At the moment (0.60/0.63) inbX/outX handle _emulated_ port-IO and
   port_inX/port_outX always access the _real_ ports.
   In 0.61 both are handled via the port_handler stuff.

   The next step should be to replace ports.c by the one from 0.61 and
   establish all port-handlers at startup of dosemu, just doing the same
   as the old ports.c. We also have to modify src/include/ports.h to reflect
   that changes. NOTE: in this step we do NOT change any other part of the
   code.

   In a later step (or steps) we will move the porthandlers to their proper
   places (within the code that handles them) and implement port registration.

   T set_ioperm           src/base/ports       src/emu
   ( this also moves the NetBsd ioperm stuff from emu.c )


  New: src/emu-i386/do_vm86.c
  --------------------------

   T vm86_GP_fault        src/emu-i386/do_vm86 src/arch/linux/async/sigsegv
   T run_vm86             src/emu-i386/do_vm86 src/emu
   ( Note: also moving NetBsd specific vm86() )

   NOTE:
   T dosemu_fault         src/arch-linux/fault src/arch/linux/async/sigsegv
   (dosemu_fault we let be in src/arch/linux/async/sigsegv,
    no need to rename the file.)

  External variables moved to src/base/data.c
  -------------------------------------------

   D in_dpmi              src/dosext/data      src/dosext/dpmi/dpmi
   D in_win31             src/dosext/data      src/dosext/dpmi/dpmi
   D dpmi_eflags          src/dosext/data      src/dosext/dpmi/dpmi
   D in_dpmi_dos_int      src/dosext/data      src/dosext/dpmi/dpmi


  New: src/base/dev/misc/rtc.c
  ---------------------------

   T rtc_read             src/base/dev_rtc
   (The rtc-code in 0.61 is new and derived from cmos.c (cmos_date()), but
   havily enhanced. It also uses the port-handler stuff.
   We will start with it by moving cmos_date() into rtc.c.
   ...later we will clean this up (when the port handlers are ready). )

   T set_ticks            src/base/dev_rtc     src/base/dev/misc/timers


  New: src/base/misc/dump.c
  ------------------------

   T show_regs            src/base/dbg_dump    src/emu-i386/cpu
   T show_ints            src/base/dbg_dump    src/emu-i386/cpu


  New: src/include/types.h  (BitXu/s)
  -----------------------

   Partially taken from 0.61 src/arch-linux/include/types.h
   We include this in src/include/emu.h, so newer stuff may use
   the BitXu, BitXs types.

   We have to go manually through the source to change the old data definition
   to BitXu much later (once we need not to compare against the old source).

  New: src/include/priv.h
  -----------------------

   The priv_on/priv_off stuff was moved out of src/dosext/mfs/mfs into
   an include file because it has to be __inline__.
   "priv.h" is also included in "emu.h", so all modules that need it
   will have it.

   T priv_on              src/base/priv        src/dosext/mfs/mfs
   T priv_off             src/base/priv        src/dosext/mfs/mfs




TODO-list, ( any takers ? )
===========================


* Remove ALL those warnings coming from -wall !!!
  -----------------------------------------------
  (tons of them are scrolling over the screen)

  But be very carefully, this is a very annoying work and you
  will get tired and uncautious... and will make faults, that
  we can't find later. (preprogrammed bugs)
  So, don't force it, take one or too files per day and have fun
  with other stuff for the rest of the day.

* The port handler stuff from 0.61
  --------------------------------

  The new port_handler stuff from 0.61 is absolutely incompatible with
  the current 0.60/0.63 stuff. So, at the moment we can't do anything
  other then moving
     'inb,inw,ind,outb,outw,outd' from src/arch/linux/async/sigsegv.c
  completely into src/emu-i386/ports.c.
  Well this is odd, because we have the names used by 0.61 for port-access
  (e.g. port_out, port_in, ...) also defined in src/include/ports.h.
  At the moment (0.60/0.63) inbX/outX handle _emulated_ port-IO and
  port_inX/port_outX always access the _real_ ports. In 0.61 both are
  handled via the port_handler stuff.

  The next step should be to replace ports.c by the one from 0.61 and
  establish all port-handlers at startup of dosemu, just doing the same
  as the old ports.c. We also have to modify src/include/ports.h to reflect
  that changes. NOTE: in this step we do NOT change any other part of the
  code.

  In a later step (or steps) we will move the porthandlers to their proper
  places (within the code that handles them) and implement port registration.


* The new src/base/dev/misc/rtc.c
  -------------------------------
  (needs to wait for the port handler)

  (The rtc-code in 0.61 is new and derived from cmos.c (cmos_date()), but
  havily enhanced. It also uses the port-handler stuff.
  We will start with it by moving cmos_date() into rtc.c.
  ...later we will clean this up (when the port handlers are ready). )


* Getting 0.61-style autoconf/config.h stuff working
  -------------------------------------------------

  We need to do this in 2 steps. 

  a) replace the current Makefile stuff by 'autoconf' generated
     Makefiles (Makfile.in e.t.c., don't ask me, I never used it)
     BUT, let the configuration variables AS IS.
     (e.g. have REQUIRES_EMUMODULE and _not_ CONFIG_EMUMODULE)

  b) If all compiles fine _and_ we need no longer to compare
     against the old code ( ...diff is our best friend ! ),
     then we do facelifting and give it nicer names.


* The init stuff as of 0.61
  -------------------------

  Clean up and collect all those init-routines, and give them
  a nice interface as in 0.61.



* The BitXu/s stuff
  ----------------

  Step by step (means module by module) scan the code and
  replace 'ul' and such odd names by Bit32u.
  These types are already defined in src/include/types.h
  and are included in src/include/emu.h.
  So, they can be used.

* RCS relates stuff
  -----------------
  The whole RCS relates stuff needs to be removed, because its' not
  applicable together with RDDC (and RDDC is excellent) !

  Also remove the checkin::, checkout::, dist::, in the Makefiles.
  (may be obsolete, if some one already has implemented autoconf)


* DANG, Dang and Dang again ... 
  -----------------------------
  Sorry folks, but I did not take care of those DANG remarks while moving
  and some kind people should do that.
  BTW, also those unchanged files have lot of outdated DANG remarks.


* As a very last step: Face-Lifting
  ---------------------------------
  (if we _really_ have finished the move to Scott's stuff)
  Do 'face lifting' of the whole code.
  Run indent, except for emumodule and syscallmgr, because we need
  to use diff against the Linux-kernel for updates.

