.\" -*- nroff -*-
.TH DOS 1 "June 17, 1994" "Version ALPHA 0.53" "MS-DOS Emulation"
.SH NAME
dos \- run MS-DOS and MS-DOS programs under Linux
.SH SYNOPSIS
.B dos
[
.B \-ABCckbVNtsgxKm234e 
]
[
.B \-D
.I flags
]
[ 
.B \-M 
.I SIZE 
]
[
.B \-P 
.I FILE 
]
[
2\> dosdbg ]
.SH DESCRIPTION
.B dos
invokes the Linux dos emulator, also known as DOSEMU.
.br
.I dosdbg
is an optional file into which all debugging output will be redirected.
.PP
Although this program is known as the DOS
.I emulator,
it is actually a virtual machine for MS-DOS, allowing DOS and programs
written for DOS to operate in an environment similar to a standard IBM
PC/AT or compatible with an Intel 80x86 processor in real mode.
.B DOSEMU
provides emulation of such services as BIOS video, disk, keyboard, serial, 
and printer; CMOS memory for configuration information; a real time clock; 
memory allocation through the XMS specification and EMS 4.0.
.PP
Because 
.B DOSEMU
is not really an emulator, a copy of MS-DOS 3.3-6.2 is required.
(Future versions of MS-DOS may run, but have of course not been verified.
DR-DOS 6.0 has also been reported to work.)
.PP
See the files 
.B QuickStart,
.B ChangeLog, 
.B doc/announce0.53, 
and the
.B Makefile
contained in the source distribution
for information on how to configure, compile, and boot 
.B DOSEMU.
.SH KERNEL PATCHES - WARNING!!!
At present, you will need Linux 1.1.12 or above with the SYSV IPC option
(System V InterProcess Communication facilities) compiled.  SYSV IPC is
an option in the config setup during compiling a Linux kernel.

For kernels older than 1.1.12 a patch is also required. If you use 1.1.x please
update to 1.1.12+. If you prefer to use 1.0.x apply the diff which comes with
DOSEMU. The patch can be found in:
.TP
.PD 0
.B kernel/kernel.1.0.x.diff
for kernel versions 1.0.x (and 1.1.x up to 1.1.8 - but better update to 1.1.12+)

.SH OPTIONS
.TP
.I -A
boot from floppy disk A (does not need to be a real floppy disk, see below)
.TP
.I -B
boot from floppy disk B (does not need to be a real floppy disk, see below)
.TP
.I -C
boot from hard disk C (does not need to be a real hard disk or even a 
msdos filesystem, see below) 
.TP
.I -c
use direct Console video (must be at the console, requires that dos is suid 
root)
.TP
.I -V
use VGA specific video optimizations
.TP
.I -k
use RAW console Keyboard (must be at the console)
.TP
.I -F
Parse this config-file instead of /etc/dosemu.conf
.TP
.I -D
specify which Debugging messages to allow/suppress
.TP
.I -x
enable XMS extended memory allocation
.TP
.I -M
set base memory to SIZE Kilobytes
.TP
.I -m
enable internal mouse-support
.TP
.I -P
copy debugging output to FILE
.TP
.I -2,3,4
choose 286, 386, or 486 processor (BE CAREFUL! DOSEMU is not yet 32-bit clean,
so if your program detects a 386 or 486 processor and uses 32-bit registers,
it might be confused by BIOS functions.  If you think this is happening, use
-2 to force DOSEMU into 286-mode.)
.PD 1
.SH HARD DISKS
.B DOSEMU
supports four methods of supplying DOS with hard disks:
.IP 1.
a virtual disk file residing on a Linux filesystem which emulates a hard 
drive.
.IP 2.
direct access to an MS-DOS partition through a raw disk device (i.e. /dev/hda,
/dev/hdb, /dev/sdX).
.IP 3.
direct access to an MS-DOS partition through single partition access 
(i.e. /dev/hda1, /dev/hdb2, /dev/sdxx). You need to run the program
.B /usr/lib/dosemu/mkpartition
to enable DOSEMU to access your DOS-partitions with SPA.
.IP 4.
access to a Linux filesystem as a "network" drive using the driver emufs.sys
supplied with
.B DOSEMU
in driver/emufs.sys.
.PP
This is explained more thoroughly in
.B QuickStart.
.PP
Configuration of
.B DOSEMU's
hard disk resources is done by editing 
.B /etc/dosemu.conf
before running DOSEMU. You find an example in examples/config.dist
.SH FLOPPY DISKS
.B DOSEMU
supports two methods of supplying DOS with floppy disks:
.IP 1.
a virtual disk file residing on a Linux filesystem which emulates a floppy
drive
.IP 2.
direct access to a physical floppy through a raw disk device (i.e. /dev/fd0,
/dev/fd1).
.PP
This is also explained more thoroughly in
.B QuickStart.
.PP
Configuration of
.B DOSEMU's
floppy disk resources is done by editing the
.B /etc/dosemu.conf
before running DOSEMU.
.SH VIDEO
.B DOSEMU
may be run on any tty device.  However, increased performance and functionality
may be had by taking advantage of special features of the Linux console.
Those running DOSEMU on the console may wish to investigate the 
.I \-c,
.I \-k,
and
.I \-V
switches, explained more thoroughly in
.B QuickStart.
There is also some brief documentation in the file examples/config.dist,
which can be copied to /etc/dosemu.conf and edited for your needs.
.PP
In brief, proper use of the console device and the corresponding switches
allows the user to view a DOS program in its original color and font,
with none of the periodic screen update problems with the generic tty
output code.
.SH KEYBOARD
Those using DOSEMU on the Linux console may also wish to use the RAW
keyboard support.  This mode of operation, selected by the
.I \-k
switch, provides the user with access to the entire keyboard accessible
under DOS.  Any combination of ALT, CTRL, and SHIFT keys may be used to
generate the odd keycodes expected by many DOS programs.
.SH PRINTING
The BIOS printer services are emulated through standard UNIX file I/O
to a set of files, 
.I dosemulpt1, 
.I dosemulpt2, 
and 
.I dosemulpt3,
corresponding to the DOS printer devices LPT1, LPT2, and LPT3.
All characters sent to LPTx will be redirected to the file dosemulptx in
the current directory.
.PP
.B WARNING!
DOSEMU does not keep the file buffers flushed; therefore, the state of these
files is undefined until you actually exit the DOS emulator.  Please
excuse the inconvenience.
.SH DEBUGGING MESSAGES
Debugging messages can be controlled either at the command line or in the
configuration file.  Take a look at the documentation inside the config.dist 
file included with DOSEMU in the examples subdirectory, for debugging 
options.  At the command line, you may specify which classes of messages 
you wish 
.B dos
to allow. The syntax of this is 
Dosemu takes an option "-D FLAGS", where FLAGS is a string of letters
which specify which options to print or suppress.  Dosemu parses this
string from left to right.

   +   turns the following options on (initial state)
   -   turns the following options off
   a   turns all the options on/off, depending on flag
   0   turns all options off
   1   turns all options on
   #   where # is a letter from the valid class list, 
       turns that option off/on depending on the 
       +/- state.

.I Message Classes:
 d  disk	v  video	R  disk Reads
 k  keyboard	i  port I/O	W  disk Writes
 s  serial	p  printer	h  hardware
 w  warnings	g  general	x  XMS
 I  IPC


Any debugging classes following a 
.I \+ 
character, up to a 
.I \- 
character, will be turned on (non-suppressed).  Any after a 
.I \-
character, up to a 
.I \+
character, will be suppressed.  The character 
.I a
acts like a string of all possible debugging classes, so 
.I \+a
turns on all debugging messages, and 
.I \-a
turns off all debugging messages.  The characters 
.I 0 
and 
.I 1
are also special: 
.I 0
turns off all debugging messages, and 
.I 1 
turns on all debugging messages.

There is an assumed 
.I \+
at the beginning of the FLAGS string.
Some classes, such as error, can not be turned off.  
In case you didn't redirect stderr, nearly all output to stderr goes to
.B /dev/null.

Some examples:
  "-D+a-v" or "-D1-v"  : all messages but video
  "-D+kd"              : default + keyboard and disk
  "-D0+RW"             : only disk READ and WRITE

Any option letter can occur in any place.  Even pointless combinations,
such as 
.I -D01-a-1+0,
will be parsed without error, so be careful.
Some options are set by default, some are clear. This is subject to my 
whim, and will probably change between releases.  You can ensure
which are set by always explicitly specifying them.
.SH SPECIAL KEYS
In RAW keyboard mode (see the
.BR \-k
option), DOSEMU responds to certain key sequences as control functions.
.PP
.PD 0
.IP 
ctrl-scrlock   =  show 0x32 int vectors
.IP 
alt-scrlock    =  show the vm86 registers
.IP
rshift-scrlock =  generate an int8 (timer)
.IP
lshift-scrlock =  generate an int9 (keyboard)
.IP
ctrl-break     =  ctrl-break as under DOS.
.IP
ctrl-alt-pgup  =  reboot DOS. Don't trust this!
.IP
ctrl-alt-pgdn  =  exit the emulator
.PD 1
.PP
Also, realize that to generate ALT-function keys, you must depress the RIGHT
ALT key together with the desired function key; the LEFT ALT key pressed
together with a function key will change virtual consoles, as it normally
does under Linux.
.SH MEMORY
The XMS memory support in DOSEMU conforms to Lotus/Intel/Microsoft/AST extended
memory specification 3.0.  I have implemented all XMS functions except
function 0x12 (Reallocate Upper Memory Block).
.PP
While I have implemented the UMB functions, they are extremely stupid and 
will almost always act suboptimally.  The next release of DOSEMU should
have saner UMB support.
.PP
DOSEMU 0.53 also supports EMS and effort has started to implement
DPMI.
.SH AUTHOR
.B DOSEMU
(comprised of the files
.B dos 
and 
.B libdosemu
) is based on version 0.4 of the original program written by Matthias Lautner
(no current address that I know of).
.PP
Robert Sanders <gt8134b@prism.gatech.edu> was maintaining and enhancing 
the incarnation of 
.B DOSEMU 
with which this man page was originally distributed. Now
James B. MacLean <macleajb@ednet.ns.ca> is maintaining this funny software.
.PP
There is also an X-based version of Matthias Lautner's DOS emulator called
.B xdos,
adapted by Edward Der-Hua Liu.
.B Xdos
uses X-specific code to provide color and line-drawing characters, and
can be found on some of the same sites as DOSEMU.  However, DOSEMU has 
much more features than xdos.  There is now a special color xterm that 
allows DOSEMU to run with all 256 IBM characters in all 16 colors.  This 
special color xterm is available at tsx-11.mit.edu:/pub/linux/ALPHA/dosemu.
.SH BUGS
There are too many to count, much less list.  
.PP
Please report bugs to the author.
I'd also like to hear about which programs DO work.  Just send me a note
detailing what program (and what version) you are using, what works and
what doesn't, etc.
.SH AVAILABILITY
The most recent public version of 
.B DOSEMU
can be ftp'ed from tsx-11.mit.edu in the /pub/linux/ALPHA/dosemu directory.
If you want to keep up on private developer pre-releases, join the DOSEMU
developer team - even just good detailed debug reports are all you need!
.SH FILES
.PD 0
.TP
.I /usr/bin/dos
The invoker program.
.TP
.I /usr/lib/libdosemu
The actual emulator code as a shared library.
.TP
.I /usr/lib/dosemu/*
Various programs to install and maintain DOSEMU on your system.
.TP
.I /var/lib/dosemu/*
Various files used by DOSEMU including diskimages and disk config files.
.TP
.I /etc/dosemu.conf
Main configuration file for DOSEMU.

.TP
.I dosemu0.53/doc/DPR
Dosemu development team: Who is doing which part of the DOSEMU project?
.TP
.I dosemu0.53/doc/DANG
To help you hack DOSEMU code.
.TP
.I dosemu0.53/QuickStart
To set up DOSEMU quickly.
.TP
.I dosemu0.53/ChangeLog
Changes in DOSEMU since the last release.
.TP
.I MSDOS mailing list
For more information, mail to
.IP 
linux-activists-request@niksula.hut.fi
